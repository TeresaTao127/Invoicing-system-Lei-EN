
buildscript {
    ext{
        flywayVersion = '7.6.0'
        lombokVersion='1.18.22'
        spockVersion='2.0-groovy-3.0'
        springBootVersion='2.4.2'
        springFoxStarterVersion = '3.0.0'
        springFoxUiVersion = '3.0.0'
        springDependencyManagementVersion='1.0.11.RELEASE'
        groovyVersion='3.0.13'
    }

}

plugins {
    id 'org.springframework.boot'  version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'java'
    id 'groovy'
    id 'checkstyle'
    id 'jacoco'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation "org.flywaydb:flyway-core:${flywayVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"


    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "io.springfox:springfox-boot-starter:${springFoxStarterVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springFoxUiVersion}"

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:2.2-groovy-3.0'
    testImplementation 'org.spockframework:spock-spring:2.2-groovy-3.0'
    testImplementation 'junit:junit:4.13.2'

    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"


    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    runtimeOnly 'com.h2database:h2:1.4.200'
    runtimeOnly 'org.postgresql:postgresql:42.2.19'


}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

bootJar {
    enabled = false
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    finalizedBy jacocoTestCoverageVerification
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}


jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.70
            }
        }

        rule {
            limit {
                counter = 'LINE'
                minimum = 0.70
            }
        }
    }

    afterEvaluate{
        classDirectories.setFrom(files(classDirectories.files.collect{
            fileTree(dir: it, exclude: 'ie/futurecollars/invoicing/controller/**')
        }))
    }

}